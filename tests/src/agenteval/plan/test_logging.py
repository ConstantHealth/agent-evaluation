from src.agenteval.plan import logging


def test_log_run_start(caplog):
    logging.log_run_start(True, 10, 5)

    assert caplog.record_tuples == [
        (
            logging.logger.name,
            logging.logging.INFO,
            "Starting 10 test(s)",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Number of threads: 5",
        ),
    ]


def test_log_run_end(caplog, mocker):
    results = {
        "test_1": mocker.MagicMock(
            spec=["success", "test_name"], test_name="test_1", success=True
        ),
        "test_2": mocker.MagicMock(
            spec=["success", "test_name"], test_name="test_2", success=True
        ),
    }

    logging.log_run_end(True, results, 2, 2, 0, 60.0, 1000, 500)

    assert caplog.record_tuples == [
        (
            logging.logger.name,
            logging.logging.INFO,
            "[green]2 passed.",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Completed in 60.0 seconds.",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "[bold green]test_1...PASSED",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "[bold green]test_2...PASSED",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Input tokens processed by evaluator: 1000",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Output tokens generated by evaluator: 500",
        ),
    ]


def test_log_run_end_with_failed_test(caplog, mocker):
    results = {
        "test_1": mocker.MagicMock(
            spec=["success", "test_name"], test_name="test_1", success=True
        ),
        "test_2": mocker.MagicMock(
            spec=["success", "test_name"], test_name="test_2", success=False
        ),
    }

    logging.log_run_end(True, results, 2, 1, 1, 60.0, 1000, 500)

    assert caplog.record_tuples == [
        (
            logging.logger.name,
            logging.logging.ERROR,
            "[red]1 passed, 1 failed.",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Completed in 60.0 seconds.",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "[bold green]test_1...PASSED",
        ),
        (
            logging.logger.name,
            logging.logging.ERROR,
            "[bold red]test_2...FAILED",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Input tokens processed by evaluator: 1000",
        ),
        (
            logging.logger.name,
            logging.logging.INFO,
            "Output tokens generated by evaluator: 500",
        ),
    ]
